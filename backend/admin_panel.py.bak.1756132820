import os
from flask import request, Response
from flask_admin import Admin, AdminIndexView, expose
from flask_admin.contrib.sqla import ModelView
from wtforms import ValidationError
from .db import db
from .models import (
    Usuario, Producto, Proveedor,
    RegistroEntradaProducto, RegistroSalidaProducto, Maquinaria
)

# --- Auth básica reutilizando tus variables de entorno ---
def _check_basic_auth(username, password):
    return (
        username == os.getenv("ADMIN_USER", "admin")
        and password == os.getenv("ADMIN_PASS", "changeme")
    )

class ProtectedIndex(AdminIndexView):
    def is_accessible(self):
        auth = request.authorization
        return bool(auth and _check_basic_auth(auth.username, auth.password))

    def _auth_failed(self):
        return Response("Acceso restringido.\n", 401,
                        {"WWW-Authenticate": 'Basic realm="SpecialWash Admin"'})

    def inaccessible_callback(self, name, **kwargs):
        return self._auth_failed()

    @expose("/")
    def index(self):
        if not self.is_accessible():
            return self.inaccessible_callback("index")
        return super().index()

class SecureModelView(ModelView):
    # protege todas las vistas del admin
    def is_accessible(self):
        auth = request.authorization
        return bool(auth and _check_basic_auth(auth.username, auth.password))

    def inaccessible_callback(self, name, **kwargs):
        return Response("Acceso restringido.\n", 401,
                        {"WWW-Authenticate": 'Basic realm="SpecialWash Admin"'})

# --- Validación de email único SOLO para Usuario ---
class UsuarioAdminView(SecureModelView):
    column_searchable_list = ["nombre", "email", "rol"]
    column_filters = ["rol"]
    column_labels = dict(nombre="Nombre", email="Email", rol="Rol")
    can_view_details = True
    create_modal = True
    edit_modal = True

    def on_model_change(self, form, model, is_created):
        email = (getattr(model, "email", None) or "").strip().lower()
        if email:
            q = Usuario.query.filter_by(email=email)
            if getattr(model, "id", None):
                q = q.filter(Usuario.id != model.id)
            if q.first():
                raise ValidationError("El email ya está registrado.")
            model.email = email
        return super().on_model_change(form, model, is_created)

class ProductoAdminView(SecureModelView):
    column_searchable_list = ["nombre", "categoria"]
    column_filters = ["categoria"]
    column_labels = dict(nombre="Nombre", categoria="Categoría", stock_minimo="Stock mín.", stock_actual="Stock")
    can_view_details = True
    create_modal = True
    edit_modal = True

class ProveedorAdminView(SecureModelView):
    column_searchable_list = ["nombre", "email", "telefono"]
    column_labels = dict(nombre="Nombre", email="Email", telefono="Teléfono")
    can_view_details = True
    create_modal = True
    edit_modal = True

class EntradaAdminView(SecureModelView):
    column_labels = dict(
        fecha_entrada="Fecha",
        numero_albaran="Nº Factura/Albarán",
        precio_sin_iva="€ sin IVA",
        porcentaje_iva="% IVA",
        descuento="Descuento",
        precio_con_iva="€ con IVA",
        producto="Producto",
        proveedor="Proveedor"
    )
    column_filters = ["fecha_entrada", "proveedor", "producto"]
    column_searchable_list = ["numero_albaran", "observaciones"]
    can_view_details = True
    create_modal = True
    edit_modal = True

class SalidaAdminView(SecureModelView):
    column_labels = dict(
        fecha_salida="Fecha",
        cantidad="Cantidad",
        producto="Producto",
        usuario="Usuario"
    )
    column_filters = ["fecha_salida", "producto", "usuario"]
    can_view_details = True
    create_modal = True
    edit_modal = True

class MaquinariaAdminView(SecureModelView):
    column_searchable_list = ["nombre", "marca", "modelo", "numero_serie"]
    column_labels = dict(
        nombre="Nombre", marca="Marca", modelo="Modelo", numero_serie="Nº Serie",
        estado="Estado", fecha_compra="Fecha compra", ultima_revision="Últ. revisión"
    )
    can_view_details = True
    create_modal = True
    edit_modal = True

def setup_admin(app):
    app.config.setdefault("FLASK_ADMIN_SWATCH", "cerulean")
    # Montamos el admin en /admin (como tu blueprint anterior)
    admin = Admin(app,
                  name="SpecialWash Admin",
                  template_mode="bootstrap4",
                  index_view=ProtectedIndex(url="/admin"))
    admin.add_view(UsuarioAdminView(Usuario, db.session, name="Usuarios"))
    admin.add_view(ProductoAdminView(Producto, db.session, name="Productos"))
    admin.add_view(ProveedorAdminView(Proveedor, db.session, name="Proveedores"))
    admin.add_view(EntradaAdminView(RegistroEntradaProducto, db.session, name="Entradas"))
    admin.add_view(SalidaAdminView(RegistroSalidaProducto, db.session, name="Salidas"))
    admin.add_view(MaquinariaAdminView(Maquinaria, db.session, name="Maquinaria"))
    return admin
