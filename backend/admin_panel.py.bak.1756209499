# backend/admin_panel.py
import os
from flask import request, Response
from flask_admin import Admin, AdminIndexView, expose
from flask_admin.contrib.sqla import ModelView
from sqlalchemy.inspection import inspect as sa_inspect
from .db import db
from .models import *  # importa todos los modelos

# ===== Seguridad básica =====
def _check_basic_auth(username, password):
    return (
        username == os.getenv("ADMIN_USER", "admin")
        and password == os.getenv("ADMIN_PASS", "changeme")
    )

class ProtectedIndex(AdminIndexView):
    def is_accessible(self):
        auth = request.authorization
        return bool(auth and _check_basic_auth(auth.username, auth.password))

    def inaccessible_callback(self, name, **kwargs):
        return Response(
            "Acceso restringido.\n", 401,
            {"WWW-Authenticate": 'Basic realm="SpecialWash Admin"'}
        )

class SecureModelView(ModelView):
    can_view_details = True
    create_modal = True
    edit_modal = True

    def is_accessible(self):
        auth = request.authorization
        return bool(auth and _check_basic_auth(auth.username, auth.password))

    def inaccessible_callback(self, name, **kwargs):
        return Response(
            "Acceso restringido.\n", 401,
            {"WWW-Authenticate": 'Basic realm="SpecialWash Admin"'}
        )

# ===== Helpers =====
def _column_names(model):
    return [c.key for c in sa_inspect(model).columns]

def _guess_ajax_field_for(model):
    for f in ("nombre", "email", "detalle", "modelo"):
        if f in _column_names(model):
            return f
    return "id"

def _make_dynamic_view(model):
    rels = sa_inspect(model).relationships
    ajax_refs = {}
    for rel in rels:
        ajax_field = _guess_ajax_field_for(rel.mapper.class_)
        ajax_refs[rel.key] = {"fields": (ajax_field,)}
    class _DynView(SecureModelView):
        form_ajax_refs = ajax_refs
    _DynView.__name__ = f"{model.__name__}AdminView"
    return _DynView

def _iter_models():
    for mapper in db.Model.registry.mappers:
        cls = mapper.class_
        if hasattr(cls, "__tablename__"):
            yield cls

# ===== Configuración del admin =====
def setup_admin(app):
    admin = Admin(
        app,
        name="SpecialWash Admin",
        template_mode="bootstrap4",
        index_view=ProtectedIndex(url="/admin", endpoint="admin_panel"),
        endpoint="admin_panel",
        url="/admin"
    )

    for model in sorted(_iter_models(), key=lambda m: m.__name__.lower()):
        try:
            view_cls = _make_dynamic_view(model)
            admin.add_view(view_cls(model, db.session, name=model.__name__))
        except Exception as e:
            print(f"[admin] Omitido {model.__name__}: {e}")

    return admin
