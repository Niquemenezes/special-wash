{"ast":null,"code":"import { apiLogin } from \"../api\";\nconst getState = ({\n  getStore,\n  setStore\n}) => ({\n  store: {\n    token: sessionStorage.getItem(\"token\") || \"\",\n    rol: sessionStorage.getItem(\"rol\") || \"\",\n    user: null\n  },\n  actions: {\n    loginUnico: async ({\n      email,\n      password,\n      rol\n    }) => {\n      try {\n        const data = await apiLogin({\n          email,\n          password,\n          rol\n        });\n        const token = (data === null || data === void 0 ? void 0 : data.access_token) || (data === null || data === void 0 ? void 0 : data.token) || \"\";\n        const rolNorm = ((data === null || data === void 0 ? void 0 : data.rol) || rol || \"\").toLowerCase();\n        if (!token) return false;\n        sessionStorage.setItem(\"token\", token);\n        sessionStorage.setItem(\"rol\", rolNorm);\n        setStore({\n          token,\n          rol: rolNorm,\n          user: (data === null || data === void 0 ? void 0 : data.usuario) || null\n        });\n        return true;\n      } catch (e) {\n        console.error(\"loginUnico error\", e);\n        return false;\n      }\n    },\n    logout: () => {\n      sessionStorage.removeItem(\"token\");\n      sessionStorage.removeItem(\"rol\");\n      setStore({\n        token: \"\",\n        rol: \"\",\n        user: null\n      });\n    }\n  }\n});\nexport default getState;","map":{"version":3,"names":["apiLogin","getState","getStore","setStore","store","token","sessionStorage","getItem","rol","user","actions","loginUnico","email","password","data","access_token","rolNorm","toLowerCase","setItem","usuario","e","console","error","logout","removeItem"],"sources":["/workspaces/special-wash/src/store/flux.js"],"sourcesContent":["import { apiLogin } from \"../api\";\n\nconst getState = ({ getStore, setStore }) => ({\n  store: {\n    token: sessionStorage.getItem(\"token\") || \"\",\n    rol: sessionStorage.getItem(\"rol\") || \"\",\n    user: null\n  },\n  actions: {\n    loginUnico: async ({ email, password, rol }) => {\n      try{\n        const data = await apiLogin({ email, password, rol });\n        const token = data?.access_token || data?.token || \"\";\n        const rolNorm = (data?.rol || rol || \"\").toLowerCase();\n        if(!token) return false;\n        sessionStorage.setItem(\"token\", token);\n        sessionStorage.setItem(\"rol\", rolNorm);\n        setStore({ token, rol: rolNorm, user: data?.usuario || null });\n        return true;\n      }catch(e){ console.error(\"loginUnico error\", e); return false; }\n    },\n    logout: () => {\n      sessionStorage.removeItem(\"token\");\n      sessionStorage.removeItem(\"rol\");\n      setStore({ token:\"\", rol:\"\", user:null });\n    }\n  }\n});\nexport default getState;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;AAEjC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,MAAM;EAC5CC,KAAK,EAAE;IACLC,KAAK,EAAEC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IAC5CC,GAAG,EAAEF,cAAc,CAACC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE;IACxCE,IAAI,EAAE;EACR,CAAC;EACDC,OAAO,EAAE;IACPC,UAAU,EAAE,MAAAA,CAAO;MAAEC,KAAK;MAAEC,QAAQ;MAAEL;IAAI,CAAC,KAAK;MAC9C,IAAG;QACD,MAAMM,IAAI,GAAG,MAAMd,QAAQ,CAAC;UAAEY,KAAK;UAAEC,QAAQ;UAAEL;QAAI,CAAC,CAAC;QACrD,MAAMH,KAAK,GAAG,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,YAAY,MAAID,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAET,KAAK,KAAI,EAAE;QACrD,MAAMW,OAAO,GAAG,CAAC,CAAAF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEN,GAAG,KAAIA,GAAG,IAAI,EAAE,EAAES,WAAW,CAAC,CAAC;QACtD,IAAG,CAACZ,KAAK,EAAE,OAAO,KAAK;QACvBC,cAAc,CAACY,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAC;QACtCC,cAAc,CAACY,OAAO,CAAC,KAAK,EAAEF,OAAO,CAAC;QACtCb,QAAQ,CAAC;UAAEE,KAAK;UAAEG,GAAG,EAAEQ,OAAO;UAAEP,IAAI,EAAE,CAAAK,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,OAAO,KAAI;QAAK,CAAC,CAAC;QAC9D,OAAO,IAAI;MACb,CAAC,QAAMC,CAAC,EAAC;QAAEC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,CAAC,CAAC;QAAE,OAAO,KAAK;MAAE;IACjE,CAAC;IACDG,MAAM,EAAEA,CAAA,KAAM;MACZjB,cAAc,CAACkB,UAAU,CAAC,OAAO,CAAC;MAClClB,cAAc,CAACkB,UAAU,CAAC,KAAK,CAAC;MAChCrB,QAAQ,CAAC;QAAEE,KAAK,EAAC,EAAE;QAAEG,GAAG,EAAC,EAAE;QAAEC,IAAI,EAAC;MAAK,CAAC,CAAC;IAC3C;EACF;AACF,CAAC,CAAC;AACF,eAAeR,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}